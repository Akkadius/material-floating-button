/**
 * CONTENTS
 *
 * #Introduction........Naming conventions used throughout the code.
 *
 * #SETTINGS
 * Variables............Globally-available variables and config.
 *
 * #TOOLS
 * Mixins...............Useful mixins.
 *
 * #GENERIC
 * Demo styles..........Styles for demo only (consider removing these).
 *
 * #BASE
 * Raw styles.............the very basic component wrapper.
 * Modifiers..............the basic styles dependant on component placement.
 * Debuggers..............the basic styles dependant on component placement.
 *
 * #BUTTONS
 * Base..................Wrapping and constraining every button.
 * Modifiers.............Styles that depends on state and settings.
 * Animations............Main animations of the component. 
 * Debuggers.............Styles for development.
 *
 * #LABELS
 * Base..................Wrapping and constraining every label.
 * Modifiers.............styles that depends on state and settings.
 * Debuggers.............Styles for development.
 *
 * #DEVELOPMENT
 * In development........These styles are in development and not yet finalised
 * Debuggers..........helper styles and flags for development.
 */

/*------------------------------------*\
    #Introduction 
\*------------------------------------*/
/**
 * The code AND the comments use naming conventions to refer to each part of 
 * the UI put in place by this component. If you see that somewhere they are
 * not followed please consider a Pull Request. The naming conventions are:
 *
 * "Component" : the widget itself as a whole. This is the last time it will be
 *               called anything different than "component". So, stay away from 
 *               "widget", "button" or anything else when referring to the 
 *               Component in general.
 * 
 * "Main Button" : the button that is always in view. Hovering or clicking on it
 *                 will reveal the child buttons.
 *
 * "Child buttons" : if you've read the previous point you know what they are.
 *                   Did you read the previous point? :)
 *  
 * "Label(s)" : the tooltip that fades in when hovering over a button.

/*------------------------------------*\
    #SETTINGS | Variables
\*------------------------------------*/

/* COLORS ----------------------------*/

// the main/primary color
$main-color: #E40A5D;
// aka the white text
$bright-text: rgba(255, 255, 255, 0.8);

/* SPEEDS ----------------------------*/

// the speed of the inflation of each button after hovering on the main button
$delay-staggering-inflate: 0.1s;
// when hovering on the main button the child buttons slide into view
$slide-speed: .5s;
// the labels disappear at this speed on mouse out
$label-hover-off: .5s;
// the labels appear at this speed on mouse over
$label-hover-on: .3s;

/* SIZES -----------------------------*/
// main button diameter
$main_button_size: 56px;
// main button diameter
$child_button_size: 56px;
// the distance of the main button from the closest corners of the screen
$border-distance: 25px;
// font-size for labels
$labels-font-size: 13px;
// top & bottom padding for the labels
$labels-padding-vertical: 4px;
// left & right padding for the labels
$labels-padding-horizontal: 10px;
/* OTHER VARIABLES -------------------*/

// how many child buttons does the component have
$number-of-child-buttons: 4;



/*------------------------------------*\
    #GENERIC | demo styles
\*------------------------------------*/

html, body{
  height: 100%;
  min-height: 100%;
}

.cf:before,
.cf:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.cf:after {
    clear: both;
}
/*------------------------------------*\
    #BASE | Raw styles
\*------------------------------------*/

/**
 * The very core styling of the button.
 * These styles are shared by every instance of the button.
 * Styles palced here should NOT care about placement in the screen,
 * options chosen by the user or state of the button.
 */

.mfo-component{
  box-sizing: border-box; // A better box-sizing 
  margin: $border-distance;
  //pointer-events: none;
  position: fixed;
  white-space: nowrap;
  z-index: 30;
  will-change: top,left;
}

// make sure that everything inside this component 
// inherits the same box-sizing
.mfo-component{
  *, *:before, *:after {
    box-sizing: inherit;
  } 
}


/*------------------------------------*\
    #BASE | Modifiers
\*------------------------------------*/
/**
 * These styles depends on the placement of the button.
 * Styles can be:
 * 1. Top-left:  modified by the " --tl " suffix.
 * 2. Top-right: modified by the " --tr " suffix.
 * 3. Bottom-left:  modified by the " --bl " suffix.
 * 4. Bottom-right: modified by the " --br " suffix.
 */

.mfo-component--tl{
  @extend .mfo-component;
  left: 0; top: 0;
}
.mfo-component--tr{
  @extend .mfo-component;  
  right: 0; top: 0;
}
.mfo-component--bl{
  @extend .mfo-component;  
  left: 0; bottom: 0;
}
.mfo-component--br{
  @extend .mfo-component;  
  right: 0; bottom: 0;
} 


/*------------------------------------*\
    #BUTTONS | Base
\*------------------------------------*/  

.mfo-component__button{
  background-color: $main-color;
  position: relative;
  border: none;
  border-radius: 50%;
  box-shadow: 0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28);
  cursor: pointer;
  outline: none;
  padding: 0;
  pointer-events: auto;
  position: relative;
  -webkit-user-drag: none;
  font-weight: bold; 
  color: #f1f1f1;       
}

/**
 * This is the unordered list for the list items that contain 
 * the child buttons.
 *
 */ 
.mfo-component__list{
  list-style: none;
  margin: 0;
  padding: 0;
  &>li{
    display: block;
    position: absolute;
    top: 0;
  }
}

/**
 * This is the basic styles for all the icons inside the main button
 */ 
.mfo-component__main-icon{
  position: absolute;
  font-size: 18px;
  left: 50%;
  top: 50%;
  margin-left: -9px;
  margin-top: -9px;
  -webkit-transform: scale(1) rotate(360deg);
  transform: scale(1) rotate(360deg);
  -webkit-transition: -webkit-transform 150ms cubic-bezier(.4,0,1,1); //, opacity 150ms;
  transition: transform 150ms cubic-bezier(.4,0,1,1); //, opacity 150ms;  
}
.mfo-component:hover,
.mfo-component__hover-helper:hover + .mfo-component__wrap{
  .mfo-component__main-icon {
    -webkit-transform: scale(1) rotate(0deg);    
    transform: scale(1) rotate(0deg);    
  }
}


/*------------------------------------*\
    #BUTTONS | Modifiers
\*------------------------------------*/  

.mfo-component__button--main{
  @extend .mfo-component__button;
  height: $main_button_size;
  width: $main_button_size;  
  z-index: 20;
}
.mfo-component__button--child{
  @extend .mfo-component__button;
  height: $child_button_size;
  width: $child_button_size;  
}
// the icons for the main button
.mfo-component__main-icon--active,
.mfo-component__main-icon--resting{
  @extend .mfo-component__main-icon;  
}
.mfo-component__main-icon--active{
  opacity: 0;
}
.mfo-component:hover,
.mfo-component__hover-helper:hover + .mfo-component__wrap{
  .mfo-component__main-icon{
    -webkit-transform: scale(1) rotate(0deg);    
    transform: scale(1) rotate(0deg);    
  }
  .mfo-component__main-icon--resting{
    opacity: 0;
  }
  .mfo-component__main-icon--active{
    opacity: 1;
  }
}

/*------------------------------------*\
    #BUTTONS | Animations
\*------------------------------------*/ 

/**
 * SLIDE IN + FADE
 * When hovering the main button, the child buttons slide out from beneath
 * the main button while transitioning from transparent to opaque.
 *
 */
.mfo-component--tl,
.mfo-component--tr{
  .mfo-component__list li{
    opacity: 0;
    transition: all $slide-speed;
  }
  &:hover{
    .mfo-component__list{
      li{
        opacity: 1;         
      }
      @for $i from 1 through $number-of-child-buttons {
        $distance: 70px * $i;
        li:nth-child( #{$i} ) { 
          -webkit-transform: translateY( $distance ); 
                  transform: translateY( $distance ); }          
      }                
    }
  }
}

.mfo-component--bl,
.mfo-component--br{
  .mfo-component__list li{
    opacity: 0;
    transition: transform $slide-speed;
  }
  &:hover{
    .mfo-component__list{
      li{
        opacity: 1;         
      }
      @for $i from 1 through $number-of-child-buttons {
        $distance: -70px * $i;
        li:nth-child( #{$i} ) { -webkit-transform: translateY( $distance ); 
                                        transform: translateY( $distance ); }          
      }                
    }
  }
}
/*------------------------------------*\
    #LABELS | base
\*------------------------------------*/

/**
 * These are the labels associated to each button.
 * They are exposed only when hovering the related button.
 */

.mfo-component__label{
  background: rgba(0,0,0, .4);
  padding: $labels-padding-vertical $labels-padding-horizontal;
  border-radius: 3px;
  color: $bright-text;
  font-size: $labels-font-size;
  pointer-events: none;
}
.mfo-component__button + .mfo-component__label{
  opacity: 0;
  transition: all $label-hover-off; // the label disappears at this speed
}
.mfo-component__button:hover + .mfo-component__label{
  opacity: 1;
  transition: all $label-hover-on;  // the label appears at this speed
} 

/*------------------------------------*\
    #LABELS | Modifiers
\*------------------------------------*/
.mfo-component--br, .mfo-component--tr{
  .mfo-component__label{
    position: absolute;
    right: 70px;
    // to align the label to the center of the vertical axis we take these sizes:
    // 1. the total button size
    // 2. the top/bottom padding of the label itself
    // 3. the font-size
    // the result is the available space left out. We divide it by 2 to get the
    // distance from the top we need to center it.
    top: ($main_button_size - ($labels-padding-vertical * 2) - $labels-font-size ) / 2;
  }
}
.mfo-component--tl, .mfo-component--bl{
  .mfo-component__label{
    position: absolute;
    left: 70px;
    top: ($main_button_size - ($labels-padding-vertical * 2) - $labels-font-size ) / 2;
  }
}

/*------------------------------------*\
    #DEVELOPMENT | In development
\*------------------------------------*/
/**
 * This part is where unfinished code should stay.
 * When a feature is ready(sh) move these styles to their proper place.
 */


/**
 * This div is never shown but it's vital for slide-in buttons
 * It takes the height of the whole Component when it is in use
 * and ensures that the menu is easily scrolled without flickering.
 * You can see its usage by toggling the slide-in dev flag 
 * (see #DEVELOPMENT | Debuggers)
 */
.mfo-component__hover-helper{
  position: absolute;
  height: 100%;
  width: 56px;
  transition: all 1s;
  top: 0;
}
.mfo-component:hover .mfo-component__hover-helper{
  height: 70px * $number-of-child-buttons;
  width: 100%;  
}

.mfo-component--tl:hover .mfo-component__hover-helper,
.mfo-component--tr:hover .mfo-component__hover-helper{
  top: 0;
}

.mfo-component--bl:hover .mfo-component__hover-helper,
.mfo-component--br:hover .mfo-component__hover-helper{
  top: -70px * $number-of-child-buttons;
}




/*------------------------------------*\
    #DEVELOPMENT | Debuggers
\*------------------------------------*/

/**
 * These are mainly helpers for development. They do not have to end up
 * in production but it's handy to keep them when developing.
 */


/**
 * Apply this class to the html tag when developing the slide-in button
 */
html.slide-in{
  border-top: 5px solid teal;
  .mfo-component__hover-helper{
    background: black;
    opacity: 0.1;
  }  
}

*{
  //border: 1px solid red;
}


